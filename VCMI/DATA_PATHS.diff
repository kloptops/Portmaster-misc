diff --git a/Global.h b/Global.h
index afb299429..2e09dd1e4 100644
--- a/Global.h
+++ b/Global.h
@@ -15,6 +15,8 @@
 // Fixed width bool data type is important for serialization
 static_assert(sizeof(bool) == 1, "Bool needs to be 1 byte in size.");
 
+#  define VCMI_PORTMASTER
+
 /* ---------------------------------------------------------------------------- */
 /* System detection. */
 /* ---------------------------------------------------------------------------- */
diff --git a/client/gui/CursorHandler.cpp b/client/gui/CursorHandler.cpp
index acc49d1c1..fe7afb23b 100644
--- a/client/gui/CursorHandler.cpp
+++ b/client/gui/CursorHandler.cpp
@@ -24,7 +24,7 @@ std::unique_ptr<ICursor> CursorHandler::createCursor()
 {
 	if (settings["video"]["cursor"].String() == "auto")
 	{
-#if defined(VCMI_MOBILE)
+#if defined(VCMI_MOBILE) || defined(VCMI_PORTMASTER)
 		return std::make_unique<CursorSoftware>();
 #else
 		return std::make_unique<CursorHardware>();
diff --git a/lib/VCMIDirs.cpp b/lib/VCMIDirs.cpp
index 1e8dc49ac..70ac73f7b 100644
--- a/lib/VCMIDirs.cpp
+++ b/lib/VCMIDirs.cpp
@@ -577,6 +577,89 @@ void VCMIDirsAndroid::init()
 	nativePath = envHelper.callStaticStringMethod(CAndroidVMHelper::NATIVE_METHODS_DEFAULT_CLASS, "nativePath");
 	IVCMIDirsUNIX::init();
 }
+#elif defined(VCMI_PORTMASTER)
+class VCMIDirsPM : public IVCMIDirsUNIX
+{
+public:
+	bfs::path userDataPath() const override;
+	bfs::path userCachePath() const override;
+	bfs::path userConfigPath() const override;
+
+	std::vector<bfs::path> dataPaths() const override;
+
+	bfs::path libraryPath() const override;
+	bfs::path binaryPath() const override;
+
+	std::string libraryName(const std::string& basename) const override;
+};
+
+bfs::path VCMIDirsPM::userDataPath() const
+{
+	const char* homeDir;
+	if((homeDir = getenv("PORTMASTER_HOME")))
+		return bfs::path(homeDir) / "data";
+	else
+		return bfs::path(".") / "data";
+}
+bfs::path VCMIDirsPM::userCachePath() const
+{
+	// $XDG_CACHE_HOME, default: $HOME/.cache
+	const char * tempResult;
+	if ((tempResult = getenv("PORTMASTER_HOME")))
+		return bfs::path(tempResult) / "cache";
+	else
+		return bfs::path(".") / "cache";
+}
+bfs::path VCMIDirsPM::userConfigPath() const
+{
+	// $XDG_CONFIG_HOME, default: $HOME/.config
+	const char * tempResult;
+	if ((tempResult = getenv("PORTMASTER_HOME")))
+		return bfs::path(tempResult) / "save";
+	else
+		return bfs::path(".") / "save";
+}
+
+std::vector<bfs::path> VCMIDirsPM::dataPaths() const
+{
+	// $XDG_DATA_DIRS, default: /usr/local/share/:/usr/share/
+
+	// construct list in reverse.
+	// in specification first directory has highest priority
+	// in vcmi fs last directory has highest priority
+	std::vector<bfs::path> ret;
+	const char * tempResult;
+	if ((tempResult = getenv("PORTMASTER_HOME")))
+	{
+		ret.push_back(bfs::path(tempResult) / "data");
+		ret.push_back(bfs::path(tempResult));
+	}
+
+	ret.push_back(bfs::path(".") / "data");
+	ret.push_back(bfs::path("."));
+	return ret;
+}
+
+bfs::path VCMIDirsPM::libraryPath() const
+{
+	const char * tempResult;
+	if ((tempResult = getenv("PORTMASTER_HOME")))
+		return bfs::path(tempResult) / "libs";
+	else
+		return M_LIB_DIR;
+}
+
+bfs::path VCMIDirsPM::binaryPath() const
+{
+	const char * tempResult;
+	if ((tempResult = getenv("PORTMASTER_HOME")))
+		return bfs::path(tempResult) / "bin";
+	else
+		return M_BIN_DIR;
+}
+
+std::string VCMIDirsPM::libraryName(const std::string& basename) const { return "lib" + basename + ".so"; }
+
 #elif defined(VCMI_XDG)
 class VCMIDirsXDG : public IVCMIDirsUNIX
 {
@@ -698,6 +781,8 @@ namespace VCMIDirs
 			static VCMIDirsWIN32 singleton;
 		#elif defined(VCMI_ANDROID)
 			static VCMIDirsAndroid singleton;
+		#elif defined(VCMI_PORTMASTER)
+			static VCMIDirsPM singleton;
 		#elif defined(VCMI_XDG)
 			static VCMIDirsXDG singleton;
 		#elif defined(VCMI_MAC)
diff --git a/scripting/lua/LuaScriptingContext.cpp b/scripting/lua/LuaScriptingContext.cpp
index 38bed3222..73ed36bc6 100644
--- a/scripting/lua/LuaScriptingContext.cpp
+++ b/scripting/lua/LuaScriptingContext.cpp
@@ -46,7 +46,7 @@ LuaContext::LuaContext(const Script * source, const Environment * env_):
 		{LUA_TABLIBNAME, luaopen_table},
 		{LUA_STRLIBNAME, luaopen_string},
 		{LUA_MATHLIBNAME, luaopen_math},
-		{LUA_BITLIBNAME, luaopen_bit}
+		{LUA_BITLIBNAME, luaopen_bit32}
 	};
 
 	for(const luaL_Reg & lib : STD_LIBS)
