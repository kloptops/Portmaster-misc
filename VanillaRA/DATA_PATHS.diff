diff --git a/common/paths_posix.cpp b/common/paths_posix.cpp
index f45d187..30e4a4e 100644
--- a/common/paths_posix.cpp
+++ b/common/paths_posix.cpp
@@ -50,8 +50,7 @@ namespace
 
         if (_path.empty()) {
             int uid = getuid();
-            const char* home_env = std::getenv("HOME");
-
+            const char* home_env = std::getenv("PORTMASTER_HOME");
             if (home_env) {
                 _path = home_env;
             } else if (uid == 0) {
@@ -90,23 +89,23 @@ namespace
 
     std::string Get_Posix_Default(const char* env_var, const char* relative_path)
     {
-        const char* tmp = std::getenv(env_var);
-
-        if (tmp != nullptr && tmp[0] != '\0') {
-            if (tmp[0] != '/') {
-                char buffer[200];
-                std::snprintf(buffer,
-                              sizeof(buffer),
-                              "'%s' should start with '/' as per XDG specification that the value must be absolute. "
-                              "The current value is: "
-                              "'%s'.",
-                              tmp,
-                              env_var);
-                DBG_WARN(buffer);
-            } else {
-                return tmp;
-            }
-        }
+        // const char* tmp = std::getenv(env_var);
+
+        // if (tmp != nullptr && tmp[0] != '\0') {
+        //     if (tmp[0] != '/') {
+        //         char buffer[200];
+        //         std::snprintf(buffer,
+        //                       sizeof(buffer),
+        //                       "'%s' should start with '/' as per XDG specification that the value must be absolute. "
+        //                       "The current value is: "
+        //                       "'%s'.",
+        //                       tmp,
+        //                       env_var);
+        //         DBG_WARN(buffer);
+        //     } else {
+        //         return tmp;
+        //     }
+        // }
 
         return User_Home() + "/" + relative_path;
     }
@@ -184,7 +183,7 @@ const char* PathsClass::Data_Path()
             Program_Path();
         }
 
-        DataPath = ProgramPath.substr(0, ProgramPath.find_last_of("/")) + SEP + "share";
+        DataPath = ProgramPath + SEP + "data";
 
         if (!Suffix.empty()) {
             DataPath += SEP + Suffix;
@@ -200,7 +199,7 @@ const char* PathsClass::User_Path()
 #ifdef __APPLE__
         UserPath = User_Home() + "/Library/Application Support/Vanilla-Conquer";
 #else
-        UserPath = Get_Posix_Default("XDG_CONFIG_HOME", ".config") + "/vanilla-conquer";
+        UserPath = Get_Posix_Default("XDG_CONFIG_HOME", "save");
 #endif
 
         if (!Suffix.empty()) {
diff --git a/redalert/options.cpp b/redalert/options.cpp
index 2b84e67..d0493c0 100644
--- a/redalert/options.cpp
+++ b/redalert/options.cpp
@@ -136,14 +136,14 @@ OptionsClass::OptionsClass(void)
     , KeySellOn(KN_NONE)
     , KeySellOff(KN_NONE)
     , KeyMap(KN_U)
-    , KeySidebarUp(KN_UP)
-    , KeySidebarDown(KN_DOWN)
+    , KeySidebarUp(KN_NONE)
+    , KeySidebarDown(KN_NONE)
     , KeyOption1(KN_ESC)
     , KeyOption2(KN_SPACE)
-    , KeyScrollLeft(KN_NONE)
-    , KeyScrollRight(KN_NONE)
-    , KeyScrollUp(KN_NONE)
-    , KeyScrollDown(KN_NONE)
+    , KeyScrollLeft(KN_LEFT)
+    , KeyScrollRight(KN_RIGHT)
+    , KeyScrollUp(KN_UP)
+    , KeyScrollDown(KN_DOWN)
     , KeyQueueMove1(KN_Q)
     , KeyQueueMove2(KN_Q)
     , KeyTeam1(KN_1)
diff --git a/tiberiandawn/options.cpp b/tiberiandawn/options.cpp
index c4206a0..367412e 100644
--- a/tiberiandawn/options.cpp
+++ b/tiberiandawn/options.cpp
@@ -111,14 +111,14 @@ OptionsClass::OptionsClass(void)
     , KeySellOn(KN_NONE)
     , KeySellOff(KN_NONE)
     , KeyMap(KN_U)
-    , KeySidebarUp(KN_UP)
-    , KeySidebarDown(KN_DOWN)
+    , KeySidebarUp(KN_NONE)
+    , KeySidebarDown(KN_NONE)
     , KeyOption1(KN_ESC)
     , KeyOption2(KN_SPACE)
-    , KeyScrollLeft(KN_NONE)
-    , KeyScrollRight(KN_NONE)
-    , KeyScrollUp(KN_NONE)
-    , KeyScrollDown(KN_NONE)
+    , KeyScrollLeft(KN_LEFT)
+    , KeyScrollRight(KN_RIGHT)
+    , KeyScrollUp(KN_UP)
+    , KeyScrollDown(KN_DOWN)
     , KeyQueueMove1(KN_Q)
     , KeyQueueMove2(KN_Q)
     , KeyTeam1(KN_1)
